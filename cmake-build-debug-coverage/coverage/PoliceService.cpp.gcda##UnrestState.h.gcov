        -:    0:Source:C:/Users/rainb/Documents/GitHub/New/Gridlock-Gurus/headers/UnrestState.h
        -:    0:Graph:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\PoliceService.cpp.gcno
        -:    0:Data:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\PoliceService.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef UNRESTSTATE_H
        -:    2:#define UNRESTSTATE_H
        -:    3:
        -:    4:#include "PoliceService.h"
        -:    5:#include "PoliceState.h"
        -:    6:
        -:    7:/**
        -:    8: * @brief Represents a state of unrest in the city.
        -:    9: *
        -:   10: * ConcreteState in the State pattern. It extends the PoliceState class and provides an implementation for checking the operational status of police services during times of unrest.
        -:   11: */
        -:   12:class UnrestState : public PoliceState {
        -:   13:public:
        -:   14:    /**
        -:   15:     * @brief Constructs a new UnrestState object.
        -:   16:     */
function _ZN11UnrestStateC1ER13PoliceService called 1 returned 100% blocks executed 100%
        1:   17:    UnrestState(PoliceService& service) : PoliceState(service) {}
        1:   17-block  0
call    0 returned 1
        -:   18:
        -:   19:    /**
        -:   20:     * @brief Destroys the UnrestState object.
        -:   21:     */
        -:   22:    ~UnrestState() = default;
        -:   23:
        -:   24:    /**
        -:   25:     * @brief Checks the operational status of the police service during a state of unrest.
        -:   26:     * This method implements behavior specific to the unrest state.
        -:   27:     */
        -:   28:    void checkOperation() override;
        -:   29:    std::string getName() override;
        -:   30:};
        -:   31:
        -:   32:#endif // UNRESTSTATE_H
