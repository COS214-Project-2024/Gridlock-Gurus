        -:    0:Source:C:/Users/rainb/Documents/GitHub/New/Gridlock-Gurus/headers/Service.h
        -:    0:Graph:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\PoliceService.cpp.gcno
        -:    0:Data:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\PoliceService.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef SERVICE_H
        -:    2:#define SERVICE_H
        -:    3:
        -:    4:#include "Building.h"
        -:    5:#include "BuildingType.h"
        -:    6:#include <algorithm>
        -:    7:#include <string>
        -:    8:#include <iostream>
        -:    9:#include <memory>
        -:   10:
        -:   11:
        -:   12:/**
        -:   13: * @brief Represents a service building (e.g., hospital, police station).
        -:   14: *
        -:   15: * ConcreteProduct participant in the Factory Method pattern. It extends the Building class and serves as a base for specific types of service buildings, providing a common interface for tax payment and services.
        -:   16: */
        -:   17:class Service : public Building {
        -:   18:protected:
        -:   19:    std::vector<Citizen*> employees;
        -:   20:    double benefits;
        -:   21:    int maxEmployees;
        -:   22:    int id;
        -:   23:public:
        -:   24:    /**
        -:   25:     * @brief Constructs a new Service building.
        -:   26:     * @param cost The construction cost of the service building.
        -:   27:     * @param location The location of the service building.
        -:   28:     * @param resources Pointer to the resources the building uses.
        -:   29:     * @param size The size of the service building.
        -:   30:     * @param owner Pointer to the owner of the service building.
        -:   31:     */
        -:   32:    Service(int cost, std::string& location, Resources* resources, int size, Citizen& owner,BuildingType name,int id);
        -:   33:
        -:   34:    /**
        -:   35:     * @brief Destroys the Service building.
        -:   36:     */
    #####:   37:    virtual ~Service() = default;
------------------
_ZN7ServiceD0Ev:
function _ZN7ServiceD0Ev called 0 returned 0% blocks executed 0%
    #####:   37:    virtual ~Service() = default;
    %%%%%:   37-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7ServiceD1Ev:
function _ZN7ServiceD1Ev called 0 returned 0% blocks executed 0%
    #####:   37:    virtual ~Service() = default;
    %%%%%:   37-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7ServiceD2Ev:
function _ZN7ServiceD2Ev called 0 returned 0% blocks executed 0%
    #####:   37:    virtual ~Service() = default;
    %%%%%:   37-block  0
call    0 never executed
call    1 never executed
------------------
        -:   38:
        -:   39:    /**
        -:   40:     * @brief Produces resources in the service building.
        -:   41:     */
        -:   42:    void employ(Citizen& employee);
        -:   43:    void fire(Citizen& employee);
        -:   44:    void retire(Citizen& employee);
        -:   45:
        -:   46:    int getNumberOfEmployees() {
        -:   47:        return this->employees.size();
        -:   48:    }
        -:   49:
        -:   50:    int getMaxEmployees() {
        -:   51:        return maxEmployees;
        -:   52:    }
        -:   53:
        -:   54:    int getId() {
        -:   55:        return id;
        -:   56:    }
        -:   57:};
        -:   58:
        -:   59:#endif // SERVICE_H
