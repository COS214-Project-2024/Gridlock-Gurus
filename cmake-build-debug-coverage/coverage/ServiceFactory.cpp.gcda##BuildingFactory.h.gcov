        -:    0:Source:C:/Users/rainb/Documents/GitHub/New/Gridlock-Gurus/headers/BuildingFactory.h
        -:    0:Graph:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\ServiceFactory.cpp.gcno
        -:    0:Data:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\ServiceFactory.cpp.gcda
        -:    0:Runs:1
        -:    1:#ifndef BUILDINGFACTORY_H
        -:    2:#define BUILDINGFACTORY_H
        -:    3:
        -:    4:#include "Building.h"
        -:    5:#include "BuildingType.h"
        -:    6:#include "TaxAuthority.h"
        -:    7:#include <memory>
        -:    8:/**
        -:    9:* @brief Factory class for creating different types of buildings.
        -:   10:* Creator participant in the Factory Method pattern. It defines the interface for creating buildings but defers the actual creation to subclasses.
        -:   11:*/
        -:   12:class BuildingFactory {
        -:   13:    
        -:   14:    public:
        -:   15:        std::shared_ptr<TaxAuthority> taxAuthority;
        -:   16:
        -:   17:        /**
        -:   18:        * @brief Constructs a new BuildingFactory object.
        -:   19:        */
        -:   20:        BuildingFactory(std::shared_ptr<TaxAuthority> taxAuthority) : taxAuthority(taxAuthority) {}
        -:   21:
        -:   22:
        -:   23:        /**
        -:   24:        * @brief Destroys the BuildingFactory object.
        -:   25:        */
function _ZN15BuildingFactoryD2Ev called 0 returned 0% blocks executed 0%
    #####:   26:        virtual ~BuildingFactory() = default;
    %%%%%:   26-block  0
call    0 never executed
        -:   27:
        -:   28:        /**
        -:   29:        * @brief Starts the construction process for a building.
        -:   30:        *
        -:   31:        * This method invokes the factory method to create a building and then begins its construction.
        -:   32:        */
        -:   33:        void startConstruction() {
        -:   34:            
        -:   35:        }
        -:   36:
        -:   37:        /**
        -:   38:        * @brief Creates a building of a specific type.
        -:   39:        * @param type The type of building to create.
        -:   40:        * @return Pointer to the created Building object.
        -:   41:        * Factory Method function, which must be implemented by concrete factory subclasses.
        -:   42:        */
        -:   43:        virtual Building* createBuilding(BuildingType type, Citizen& owner) = 0;
        -:   44:
        -:   45:
        -:   46:};
        -:   47:
        -:   48:#endif // BUILDINGFACTORY_H
