        -:    0:Source:C:/Users/rainb/Documents/GitHub/New/Gridlock-Gurus/src/TransportDepartment.cpp
        -:    0:Graph:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\TransportDepartment.cpp.gcno
        -:    0:Data:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\TransportDepartment.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "TransportDepartment.h"
        -:    2:#include <iostream>
        -:    3:#include <map>
        -:    4:#include <stdexcept>
        -:    5:#include "TransportState.h"
        -:    6:#include "Broken.h"
        -:    7:#include "Damaged.h"
        -:    8:#include "Functional.h"
        -:    9:
function _ZN19TransportDepartment10addVehicleEP7Vehicle called 26 returned 100% blocks executed 100%
       26:   10:void TransportDepartment::addVehicle(Vehicle* vehicle) {
       26:   11:    vehicles.push_back(vehicle);
       26:   11-block  0
call    0 returned 26
       26:   12:}
        -:   13:
function _ZN19TransportDepartment6manageEv called 4 returned 100% blocks executed 79%
        4:   14:void TransportDepartment::manage() {
        4:   15:    std::map<std::string, int> functionalCounts;
        4:   15-block  0
call    0 returned 4
        -:   16:
       15:   17:    for (auto& vehicle : vehicles) {
call    0 returned 4
call    1 returned 4
       11:   17-block  0
call    2 returned 11
       11:   17-block  1
call    3 returned 11
       15:   17-block  2
call    4 returned 15
branch  5 taken 11
branch  6 taken 4 (fallthrough)
       11:   18:        vehicle->checkState();
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
      11*:   19:        if (vehicle->getState() && dynamic_cast<Functional*>(vehicle->getState())) {
       11:   19-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   19-block  1
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       11:   19-block  2
call    5 returned 11
branch  6 taken 11 (fallthrough)
branch  7 taken 0 (throw)
       11:   19-block  3
branch  8 taken 11 (fallthrough)
branch  9 taken 0
       11:   19-block  4
    %%%%%:   19-block  5
       11:   19-block  6
branch 10 taken 3 (fallthrough)
branch 11 taken 8
        3:   19-block  7
        8:   19-block  8
       11:   19-block  9
branch 12 taken 3 (fallthrough)
branch 13 taken 8
        3:   20:            functionalCounts[vehicle->getType()]++;
        3:   20-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   20-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   20-block  2
call    6 returned 3
    $$$$$:   20-block  3
call    7 never executed
    $$$$$:   20-block  4
        -:   21:        }
        -:   22:    }
        -:   23:
       15:   24:    for (auto& vehicle : vehicles) {
        4:   24-block  0
call    0 returned 4
call    1 returned 4
       11:   24-block  1
call    2 returned 11
       11:   24-block  2
call    3 returned 11
       15:   24-block  3
call    4 returned 15
branch  5 taken 11
branch  6 taken 4 (fallthrough)
      11*:   25:        if (vehicle->getState() && dynamic_cast<Broken*>(vehicle->getState())) {
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   25-block  0
branch  3 taken 11 (fallthrough)
branch  4 taken 0
       11:   25-block  1
call    5 returned 11
branch  6 taken 11 (fallthrough)
branch  7 taken 0 (throw)
       11:   25-block  2
branch  8 taken 11 (fallthrough)
branch  9 taken 0
       11:   25-block  3
    %%%%%:   25-block  4
       11:   25-block  5
branch 10 taken 8 (fallthrough)
branch 11 taken 3
        8:   25-block  6
        3:   25-block  7
       11:   25-block  8
branch 12 taken 8 (fallthrough)
branch 13 taken 3
        8:   26:            if (functionalCounts[vehicle->getType()] < (vehicles.size() / 2)) {
        8:   26-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:   26-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:   26-block  2
call    6 returned 8
call    7 returned 8
branch  8 taken 8 (fallthrough)
branch  9 taken 0
    $$$$$:   26-block  3
call   10 never executed
    $$$$$:   26-block  4
        8:   27:                repairVehicles(vehicle);
        8:   27-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -:   28:            }
        -:   29:        }
        -:   30:    }
        4:   31:}
        4:   31-block  0
call    0 returned 4
    $$$$$:   31-block  1
call    1 never executed
        -:   32:
        -:   33:
function _ZN19TransportDepartment19getAvailableVehicleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 13 returned 54% blocks executed 79%
       13:   34:Vehicle* TransportDepartment::getAvailableVehicle(const std::string& type) {
       20:   35:    for (auto& vehicle : vehicles) {
       13:   35-block  0
call    0 returned 13
call    1 returned 13
       14:   35-block  1
call    2 returned 14
        7:   35-block  2
call    3 returned 7
       20:   35-block  3
call    4 returned 20
branch  5 taken 14
branch  6 taken 6 (fallthrough)
       14:   36:        if (vehicle->getType() == type) {
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14:   36-block  0
call    3 returned 14
call    4 returned 14
branch  5 taken 12 (fallthrough)
branch  6 taken 2
    $$$$$:   36-block  1
      12*:   37:            if (vehicle->getState() && dynamic_cast<Functional*>(vehicle->getState())) {
       12:   37-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   37-block  1
branch  3 taken 12 (fallthrough)
branch  4 taken 0
       12:   37-block  2
call    5 returned 12
branch  6 taken 12 (fallthrough)
branch  7 taken 0 (throw)
       12:   37-block  3
branch  8 taken 12 (fallthrough)
branch  9 taken 0
       12:   37-block  4
    %%%%%:   37-block  5
       12:   37-block  6
branch 10 taken 7 (fallthrough)
branch 11 taken 5
        7:   37-block  7
        5:   37-block  8
       12:   37-block  9
branch 12 taken 7 (fallthrough)
branch 13 taken 5
        7:   38:                return vehicle;
        7:   38-block  0
        7:   38-block  1
        -:   39:            }
       5*:   40:            if(vehicle->getState() && dynamic_cast<Damaged*>(vehicle->getState())) {
        5:   40-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   40-block  1
branch  3 taken 5 (fallthrough)
branch  4 taken 0
        5:   40-block  2
call    5 returned 5
branch  6 taken 5 (fallthrough)
branch  7 taken 0 (throw)
        5:   40-block  3
branch  8 taken 5 (fallthrough)
branch  9 taken 0
        5:   40-block  4
    %%%%%:   40-block  5
        5:   40-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 5
    %%%%%:   40-block  7
        5:   40-block  8
        5:   40-block  9
branch 12 taken 0 (fallthrough)
branch 13 taken 5
    #####:   41:                return vehicle;
    %%%%%:   41-block  0
        -:   42:            }
        -:   43:        }
        -:   44:    }
        6:   45:    std::cout<<"No drivers were found."<<std::endl;
        6:   45-block  0
call    0 returned 6
call    1 returned 6
        6:   46:    throw std::runtime_error("No available vehicle of type: " + type);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:   46-block  0
call    4 returned 6
branch  5 taken 6 (fallthrough)
branch  6 taken 0 (throw)
        6:   46-block  1
call    7 returned 6
call    8 returned 0
    $$$$$:   46-block  2
call    9 never executed
    $$$$$:   46-block  3
    $$$$$:   46-block  4
call   10 never executed
        -:   47:}
        -:   48:
        -:   49:
function _ZN19TransportDepartment14repairVehiclesEP7Vehicle called 9 returned 100% blocks executed 76%
        9:   50:void TransportDepartment::repairVehicles(Vehicle* vehicle) {
        9:   51:    std::cout << "Repairing " << vehicle->getType() << "." << std::endl;
        9:   51-block  0
call    0 returned 9
call    1 returned 9
branch  2 taken 9 (fallthrough)
branch  3 taken 0 (throw)
        9:   51-block  1
call    4 returned 9
branch  5 taken 9 (fallthrough)
branch  6 taken 0 (throw)
        9:   51-block  2
call    7 returned 9
branch  8 taken 9 (fallthrough)
branch  9 taken 0 (throw)
        9:   51-block  3
call   10 returned 9
branch 11 taken 9 (fallthrough)
branch 12 taken 0 (throw)
        9:   51-block  4
call   13 returned 9
    $$$$$:   51-block  5
call   14 never executed
    $$$$$:   51-block  6
call   15 never executed
       9*:   52:    if (dynamic_cast<Broken*>(vehicle->getState())) {
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0
        9:   52-block  0
    %%%%%:   52-block  1
        9:   52-block  2
branch  3 taken 9 (fallthrough)
branch  4 taken 0
        9:   53:        delete vehicle->getState();
        9:   53-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0
        9:   53-block  1
call    3 returned 9
        9:   54:        vehicle->setState(new Functional());
        9:   54-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
branch  3 taken 9 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:   54-block  1
branch  5 never executed (fallthrough)
branch  6 never executed
    $$$$$:   54-block  2
call    7 never executed
        9:   55:        vehicle->repair();
        9:   55-block  0
call    0 returned 9
        -:   56:    }
        9:   57:}
        9:   57-block  0
        -:   58:
