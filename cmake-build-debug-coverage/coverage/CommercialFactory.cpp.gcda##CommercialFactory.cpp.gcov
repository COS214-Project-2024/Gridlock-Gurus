        -:    0:Source:C:/Users/rainb/Documents/GitHub/New/Gridlock-Gurus/src/CommercialFactory.cpp
        -:    0:Graph:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\CommercialFactory.cpp.gcno
        -:    0:Data:C:\Users\rainb\Documents\GitHub\New\Gridlock-Gurus\cmake-build-debug-coverage\CMakeFiles\tests.dir\src\CommercialFactory.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Commercial.h"
        -:    2:#include "CommercialFactory.h"
        -:    3:#include <string>
        -:    4:
        -:    5:// Made citizen a reference instead of pointer to prevent it being nullptr
function _ZN17CommercialFactory14createBuildingE12BuildingTypeR7Citizen called 1 returned 100% blocks executed 57%
        1:    6:Building *CommercialFactory::createBuilding(BuildingType type, Citizen& owner) {
        1:    7:    Resources* resources = new Resources(100,100,true);
        1:    7-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:    7-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:    7-block  2
    $$$$$:    7-block  3
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:    7-block  4
call    8 never executed
        -:    8:    int maxEmployees;
        -:    9:    int productionRate;
        -:   10:    int cost;
        1:   11:    std::string location = "Business district";
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:   11-block  1
        -:   12:
        -:   13:    // I changed it because before it returs a nullptr? checks should be done before calling, the function of factory is just to produce
        1:   14:    if(type == BuildingType::Bank) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   15:        maxEmployees = 30;
        1:   16:        cost = 200;
        1:   17:        productionRate = 6;
        1:   17-block  0
        -:   18:        
        -:   19:    } else {
    #####:   20:        maxEmployees = 60;
    #####:   21:        cost = 100;
    #####:   22:        productionRate = 12;
    %%%%%:   22-block  0
        -:   23:    }
        -:   24:
        1:   25:    Commercial* c = new Commercial(cost, location,resources, 1000, owner, type,maxEmployees,productionRate);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$:   25-block  2
branch  6 never executed (fallthrough)
branch  7 never executed
    $$$$$:   25-block  3
call    8 never executed
        1:   26:    taxAuthority->registerBuilding(*c);
        1:   26-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   27:    return c;
        1:   27-block  0
        1:   28:}
        1:   28-block  0
call    0 returned 1
    $$$$$:   28-block  1
call    1 never executed
